{"version":3,"file":"index.mjs","sources":["../../admin/src/pluginId.ts","../../admin/src/components/Initializer/index.tsx","../../admin/src/components/PluginIcon/index.tsx","../../admin/src/utils/getTrad.ts","../../admin/src/index.ts"],"sourcesContent":["import pluginPkg from '../../package.json';\n\nconst pluginId = pluginPkg.name.replace(/^(@[^-,.][\\w,-]+\\/|strapi-)plugin-/i, '');\n\nexport default pluginId;\n","/**\n *\n * Initializer\n *\n */\n\nimport { useEffect, useRef } from 'react';\nimport pluginId from '../../pluginId';\n\ntype InitializerProps = {\n  setPlugin: (id: string) => void;\n};\n\nconst Initializer = ({ setPlugin }: InitializerProps) => {\n  const ref = useRef(setPlugin);\n\n  useEffect(() => {\n    ref.current(pluginId);\n  }, []);\n\n  return null;\n};\n\nexport default Initializer;\n","/**\n *\n * PluginIcon\n *\n */\n\nimport styled from \"styled-components\";\nimport { Phone } from \"@strapi/icons\";\n\nconst StyledPhoneIcon = styled(Phone)`\n  background: ${({ theme }) => theme.colors.primary100};\n  padding: 4px;\n  border-radius: 4px;\n  path {\n    fill: ${({ theme }) => theme.colors.success600};\n  }\n`;\n\nconst PluginIcon = () => <StyledPhoneIcon />;\n\nexport default PluginIcon;\n","import pluginId from '../pluginId';\n\nconst getTrad = (id: string) => `${pluginId}.${id}`;\n\nexport default getTrad;\n","import { prefixPluginTranslations } from \"@strapi/helper-plugin\";\n\nimport pluginPkg from \"../../package.json\";\nimport pluginId from \"./pluginId\";\nimport Initializer from \"./components/Initializer\";\nimport PluginIcon from \"./components/PluginIcon\";\nimport getTrad from \"./utils/getTrad\";\nimport {\n  defaultCountries,\n  parseCountry,\n  CountryData,\n} from \"react-international-phone\";\n\nconst name = pluginPkg.strapi.name;\n\nexport default {\n  register(app: any) {\n    app.customFields.register({\n      name: \"phone\",\n      pluginId, // the custom field is created by plugin\n      type: \"string\", // the phone will be stored as a string\n      intlLabel: {\n        id: getTrad(\"input.label\"),\n        defaultMessage: name,\n      },\n      intlDescription: {\n        id: getTrad(\"input.description\"),\n        defaultMessage: \"Validate phone number\",\n      },\n      icon: PluginIcon, // don't forget to create/import your icon component\n      components: {\n        Input: async () => import(\"./components/Input\"),\n      },\n      error: {\n        id: getTrad(\"form.attribute.item.phoneValidator\"),\n        defaultMessage: \"This is an invalid phone number\",\n      },\n      options: {\n        advanced: [\n          {\n            name: \"options.country\",\n            type: \"select\",\n            intlLabel: {\n              id: getTrad(\"attribute.item.defaultCountry\"),\n              defaultMessage: \"Default Country\",\n            },\n            options: defaultCountries.map((country: CountryData) => {\n              const { iso2, name } = parseCountry(country);\n              return {\n                key: iso2,\n                value: iso2,\n                metadatas: {\n                  intlLabel: {\n                    id: getTrad(`country.item.${iso2}`),\n                    defaultMessage: name,\n                  },\n                },\n              };\n            }),\n          },\n          {\n            sectionTitle: {\n              id: \"global.settings\",\n              defaultMessage: \"Settings\",\n            },\n            items: [\n              {\n                name: \"required\",\n                type: \"checkbox\",\n                intlLabel: {\n                  id: \"form.attribute.item.requiredField\",\n                  defaultMessage: \"Required field\",\n                },\n                description: {\n                  id: \"form.attribute.item.requiredField.description\",\n                  defaultMessage:\n                    \"You won't be able to create an entry if this field is empty\",\n                },\n              },\n              {\n                name: \"private\",\n                type: \"checkbox\",\n                intlLabel: {\n                  id: \"form.attribute.item.privateField\",\n                  defaultMessage: \"Private field\",\n                },\n                description: {\n                  id: \"form.attribute.item.privateField.description\",\n                  defaultMessage:\n                    \"This field will not show up in the API response\",\n                },\n              },\n            ],\n          },\n        ],\n      },\n    });\n\n    const plugin = {\n      id: pluginId,\n      initializer: Initializer,\n      isReady: false,\n      name,\n    };\n\n    app.registerPlugin(plugin);\n  },\n\n  bootstrap(app: any) {},\n\n  async registerTrads(app: any) {\n    const { locales } = app;\n\n    const importedTrads = await Promise.all(\n      (locales as any[]).map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, pluginId),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n"],"names":["name"],"mappings":"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"}