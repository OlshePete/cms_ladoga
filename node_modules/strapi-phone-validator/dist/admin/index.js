"use strict";
const helperPlugin = require("@strapi/helper-plugin");
const React = require("react");
const jsxRuntime = require("react/jsx-runtime");
const styled = require("styled-components");
const icons = require("@strapi/icons");
const reactInternationalPhone = require("react-international-phone");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const styled__default = /* @__PURE__ */ _interopDefault(styled);
const __variableDynamicImportRuntimeHelper = (glob, path) => {
  const v = glob[path];
  if (v) {
    return typeof v === "function" ? v() : Promise.resolve(v);
  }
  return new Promise((_, reject) => {
    (typeof queueMicrotask === "function" ? queueMicrotask : setTimeout)(reject.bind(null, new Error("Unknown variable dynamic import: " + path)));
  });
};
const name$1 = "strapi-phone-validator";
const version = "0.3.2";
const description = "Strapi maintaned Custom Fields";
const keywords = [
  "strapi",
  "strapi-plugin",
  "strapi-plugin-phone-validator",
  "phone-validator",
  "strapi-phone-validator",
  "strapi-custom-field",
  "phone",
  "validator",
  "strapi-phone"
];
const repository = {
  type: "git",
  url: "https://github.com/shadjiu/strapi-phone-validator.git"
};
const license = "MIT";
const author = {
  name: "Hadjiu Sorin",
  email: "hadjiu.sorin@gmail.com",
  url: "https://github.com/shadjiu"
};
const maintainers = [
  {
    name: "A Strapi developer"
  }
];
const exports$1 = {
  "./strapi-admin": {
    types: "./dist/admin/index.d.ts",
    source: "./admin/src/index.ts",
    "import": "./dist/admin/index.mjs",
    require: "./dist/admin/index.js",
    "default": "./dist/admin/index.js"
  },
  "./strapi-server": {
    types: "./dist/server/src/index.d.ts",
    source: "./server/src/index.ts",
    "import": "./dist/server/index.mjs",
    require: "./dist/server/index.js",
    "default": "./dist/server/index.js"
  },
  "./package.json": "./package.json"
};
const files = [
  "./dist",
  "strapi-server.js",
  "strapi-admin.js"
];
const scripts = {
  build: "strapi plugin:build --force",
  clean: "run -T rimraf ./dist",
  watch: "strapi plugin:watch"
};
const resolutions = {
  "@types/react": "^17.0.0 || ^18.0.0"
};
const dependencies = {
  "@strapi/design-system": "^1.18.0",
  "@strapi/helper-plugin": "^4.24.0",
  "@strapi/icons": "^1.18.0",
  "google-libphonenumber": "^3.2.34",
  "prop-types": "^15.8.1",
  "react-international-phone": "^4.2.8"
};
const devDependencies = {
  "@strapi/strapi": "^4.24.0",
  "@strapi/typescript-utils": "^4.24.0",
  "@types/google-libphonenumber": "^7.4.30",
  "@types/react": "^18.2.79",
  "@types/react-dom": "^18.2.25",
  "@types/react-router-dom": "^5.3.3",
  "@types/styled-components": "^5.1.34",
  react: "^18.2.0",
  "react-dom": "^18.2.0",
  "react-router-dom": "^5.3.4",
  "styled-components": "^5.3.11",
  typescript: "5.4.2"
};
const peerDependencies = {
  "@strapi/strapi": "^4.0.0",
  react: "^17.0.0 || ^18.0.0",
  "react-dom": "^17.0.0 || ^18.0.0",
  "react-router-dom": "^5.2.0",
  "styled-components": "^5.2.1"
};
const packageManager = "yarn@4.1.1";
const engines = {
  node: ">=18.0.0 <=20.x.x",
  npm: ">=6.0.0"
};
const strapi = {
  name: "strapi-phone-validator",
  displayName: "Strapi Phone Validator",
  description: "Strapi Phone Validator is a powerful and easy-to-use plugin designed to validate phone numbers in various formats. With support for international phone numbers, it offers comprehensive validation to ensure the accuracy of user-provided phone data in your applications.",
  kind: "plugin"
};
const pluginPkg = {
  name: name$1,
  version,
  description,
  keywords,
  repository,
  license,
  author,
  maintainers,
  exports: exports$1,
  files,
  scripts,
  resolutions,
  dependencies,
  devDependencies,
  peerDependencies,
  packageManager,
  engines,
  strapi
};
const pluginId = pluginPkg.name.replace(/^(@[^-,.][\w,-]+\/|strapi-)plugin-/i, "");
const Initializer = ({ setPlugin }) => {
  const ref = React.useRef(setPlugin);
  React.useEffect(() => {
    ref.current(pluginId);
  }, []);
  return null;
};
const StyledPhoneIcon = styled__default.default(icons.Phone)`
  background: ${({ theme }) => theme.colors.primary100};
  padding: 4px;
  border-radius: 4px;
  path {
    fill: ${({ theme }) => theme.colors.success600};
  }
`;
const PluginIcon = () => /* @__PURE__ */ jsxRuntime.jsx(StyledPhoneIcon, {});
const getTrad = (id) => `${pluginId}.${id}`;
const name = pluginPkg.strapi.name;
const index = {
  register(app) {
    app.customFields.register({
      name: "phone",
      pluginId,
      // the custom field is created by plugin
      type: "string",
      // the phone will be stored as a string
      intlLabel: {
        id: getTrad("input.label"),
        defaultMessage: name
      },
      intlDescription: {
        id: getTrad("input.description"),
        defaultMessage: "Validate phone number"
      },
      icon: PluginIcon,
      // don't forget to create/import your icon component
      components: {
        Input: async () => Promise.resolve().then(() => require("../_chunks/index-CRrdDgBK.js"))
      },
      error: {
        id: getTrad("form.attribute.item.phoneValidator"),
        defaultMessage: "This is an invalid phone number"
      },
      options: {
        advanced: [
          {
            name: "options.country",
            type: "select",
            intlLabel: {
              id: getTrad("attribute.item.defaultCountry"),
              defaultMessage: "Default Country"
            },
            options: reactInternationalPhone.defaultCountries.map((country) => {
              const { iso2, name: name2 } = reactInternationalPhone.parseCountry(country);
              return {
                key: iso2,
                value: iso2,
                metadatas: {
                  intlLabel: {
                    id: getTrad(`country.item.${iso2}`),
                    defaultMessage: name2
                  }
                }
              };
            })
          },
          {
            sectionTitle: {
              id: "global.settings",
              defaultMessage: "Settings"
            },
            items: [
              {
                name: "required",
                type: "checkbox",
                intlLabel: {
                  id: "form.attribute.item.requiredField",
                  defaultMessage: "Required field"
                },
                description: {
                  id: "form.attribute.item.requiredField.description",
                  defaultMessage: "You won't be able to create an entry if this field is empty"
                }
              },
              {
                name: "private",
                type: "checkbox",
                intlLabel: {
                  id: "form.attribute.item.privateField",
                  defaultMessage: "Private field"
                },
                description: {
                  id: "form.attribute.item.privateField.description",
                  defaultMessage: "This field will not show up in the API response"
                }
              }
            ]
          }
        ]
      }
    });
    const plugin = {
      id: pluginId,
      initializer: Initializer,
      isReady: false,
      name
    };
    app.registerPlugin(plugin);
  },
  bootstrap(app) {
  },
  async registerTrads(app) {
    const { locales } = app;
    const importedTrads = await Promise.all(
      locales.map((locale) => {
        return __variableDynamicImportRuntimeHelper(/* @__PURE__ */ Object.assign({ "./translations/en.json": () => Promise.resolve().then(() => require("../_chunks/en-B4KWt_jN.js")), "./translations/fr.json": () => Promise.resolve().then(() => require("../_chunks/fr-C8Qw4iPZ.js")) }), `./translations/${locale}.json`).then(({ default: data }) => {
          return {
            data: helperPlugin.prefixPluginTranslations(data, pluginId),
            locale
          };
        }).catch(() => {
          return {
            data: {},
            locale
          };
        });
      })
    );
    return Promise.resolve(importedTrads);
  }
};
module.exports = index;
//# sourceMappingURL=index.js.map
